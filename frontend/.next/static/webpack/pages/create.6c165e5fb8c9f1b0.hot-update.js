"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/create",{

/***/ "(pages-dir-browser)/./src/contracts/hooks/useGreenTrace.ts":
/*!**********************************************!*\
  !*** ./src/contracts/hooks/useGreenTrace.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuditStatus: () => (/* binding */ AuditStatus),\n/* harmony export */   AuditType: () => (/* binding */ AuditType),\n/* harmony export */   useAddAuditor: () => (/* binding */ useAddAuditor),\n/* harmony export */   useAddBusinessContract: () => (/* binding */ useAddBusinessContract),\n/* harmony export */   useCalculateAuditFee: () => (/* binding */ useCalculateAuditFee),\n/* harmony export */   useCalculateRequestFee: () => (/* binding */ useCalculateRequestFee),\n/* harmony export */   useCalculateReturnAmount: () => (/* binding */ useCalculateReturnAmount),\n/* harmony export */   useCalculateSystemFee: () => (/* binding */ useCalculateSystemFee),\n/* harmony export */   useCompleteExchangeAudit: () => (/* binding */ useCompleteExchangeAudit),\n/* harmony export */   useExchangeNFT: () => (/* binding */ useExchangeNFT),\n/* harmony export */   useGetAudit: () => (/* binding */ useGetAudit),\n/* harmony export */   useGetCarbonToken: () => (/* binding */ useGetCarbonToken),\n/* harmony export */   useGetGreenTalesNFT: () => (/* binding */ useGetGreenTalesNFT),\n/* harmony export */   useGetOwner: () => (/* binding */ useGetOwner),\n/* harmony export */   useGreenTrace: () => (/* binding */ useGreenTrace),\n/* harmony export */   useGreenTraceConstants: () => (/* binding */ useGreenTraceConstants),\n/* harmony export */   useInitialize: () => (/* binding */ useInitialize),\n/* harmony export */   useIsAuditor: () => (/* binding */ useIsAuditor),\n/* harmony export */   useIsBusinessContract: () => (/* binding */ useIsBusinessContract),\n/* harmony export */   useMintNFTByBusiness: () => (/* binding */ useMintNFTByBusiness),\n/* harmony export */   usePayAndMintNFT: () => (/* binding */ usePayAndMintNFT),\n/* harmony export */   useRemoveAuditor: () => (/* binding */ useRemoveAuditor),\n/* harmony export */   useRemoveBusinessContract: () => (/* binding */ useRemoveBusinessContract),\n/* harmony export */   useRequestExchangeNFT: () => (/* binding */ useRequestExchangeNFT),\n/* harmony export */   useRequestMintNFT: () => (/* binding */ useRequestMintNFT),\n/* harmony export */   useSetNFTContract: () => (/* binding */ useSetNFTContract),\n/* harmony export */   useSubmitExchangeAudit: () => (/* binding */ useSubmitExchangeAudit),\n/* harmony export */   useSubmitMintAudit: () => (/* binding */ useSubmitMintAudit),\n/* harmony export */   useUpdateNFTPriceByBusiness: () => (/* binding */ useUpdateNFTPriceByBusiness)\n/* harmony export */ });\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wagmi */ \"(pages-dir-browser)/./node_modules/wagmi/dist/esm/exports/index.js\");\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../addresses */ \"(pages-dir-browser)/./src/contracts/addresses.ts\");\n/* harmony import */ var _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abi/GreenTrace.json */ \"(pages-dir-browser)/./src/contracts/abi/GreenTrace.json\");\n\n\n\nvar AuditStatus = /*#__PURE__*/ function(AuditStatus) {\n    AuditStatus[AuditStatus[\"PENDING\"] = 0] = \"PENDING\";\n    AuditStatus[AuditStatus[\"APPROVED\"] = 1] = \"APPROVED\";\n    AuditStatus[AuditStatus[\"REJECTED\"] = 2] = \"REJECTED\";\n    return AuditStatus;\n}({});\nvar AuditType = /*#__PURE__*/ function(AuditType) {\n    AuditType[AuditType[\"MINT\"] = 0] = \"MINT\";\n    AuditType[AuditType[\"EXCHANGE\"] = 1] = \"EXCHANGE\";\n    return AuditType;\n}({});\nconst getContractAddress = (chainId)=>{\n    switch(chainId){\n        case 1:\n            return _addresses__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ADDRESSES.mainnet.GreenTrace;\n        case 11155111:\n            return _addresses__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ADDRESSES.sepolia.GreenTrace;\n        case 31337:\n            return _addresses__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ADDRESSES.foundry.GreenTrace;\n        default:\n            return _addresses__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ADDRESSES.sepolia.GreenTrace;\n    }\n};\nconst useGreenTraceConstants = ()=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { data: baseRate } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'BASE_RATE'\n    });\n    const { data: systemFeeRate } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'SYSTEM_FEE_RATE'\n    });\n    const { data: auditFeeRate } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'AUDIT_FEE_RATE'\n    });\n    const { data: initialized } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'initialized'\n    });\n    const { data: isTestEnvironment } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'isTestEnvironment'\n    });\n    return {\n        baseRate,\n        systemFeeRate,\n        auditFeeRate,\n        initialized,\n        isTestEnvironment\n    };\n};\nconst useCalculateRequestFee = (carbonReduction)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'calculateRequestFee',\n        args: carbonReduction ? [\n            carbonReduction\n        ] : undefined,\n        query: {\n            enabled: !!carbonReduction && carbonReduction > BigInt(0)\n        }\n    });\n};\nconst useCalculateSystemFee = (amount)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'calculateSystemFee',\n        args: amount ? [\n            amount\n        ] : undefined,\n        query: {\n            enabled: !!amount && amount > BigInt(0)\n        }\n    });\n};\nconst useCalculateAuditFee = (amount)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'calculateAuditFee',\n        args: amount ? [\n            amount\n        ] : undefined,\n        query: {\n            enabled: !!amount && amount > BigInt(0)\n        }\n    });\n};\nconst useCalculateReturnAmount = (amount)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'calculateReturnAmount',\n        args: amount ? [\n            amount\n        ] : undefined,\n        query: {\n            enabled: !!amount && amount > BigInt(0)\n        }\n    });\n};\nconst useRequestMintNFT = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const requestMint = (title, storyDetails, carbonReduction, tokenURI)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'requestMintNFT',\n            args: [\n                title,\n                storyDetails,\n                carbonReduction,\n                tokenURI\n            ]\n        });\n    };\n    return {\n        requestMint,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useMintNFTByBusiness = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const mintByBusiness = (recipient, title, storyDetails, carbonReduction, initialPrice, tokenURI)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'mintNFTByBusiness',\n            args: [\n                recipient,\n                title,\n                storyDetails,\n                carbonReduction,\n                initialPrice,\n                tokenURI\n            ]\n        });\n    };\n    return {\n        mintByBusiness,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst usePayAndMintNFT = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const payAndMint = (tokenId, to, title, details, carbonReduction, tokenURI)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'payAndMintNFT',\n            args: [\n                tokenId,\n                to,\n                title,\n                details,\n                carbonReduction,\n                tokenURI\n            ]\n        });\n    };\n    return {\n        payAndMint,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useRequestExchangeNFT = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const requestExchange = (tokenId)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'requestExchangeNFT',\n            args: [\n                tokenId\n            ]\n        });\n    };\n    return {\n        requestExchange,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useExchangeNFT = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const exchangeNFT = (tokenId)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'exchangeNFT',\n            args: [\n                tokenId\n            ]\n        });\n    };\n    return {\n        exchangeNFT,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useSubmitMintAudit = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const submitMintAudit = (tokenId, carbonValue, reason)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'submitMintAudit',\n            args: [\n                tokenId,\n                carbonValue,\n                reason\n            ]\n        });\n    };\n    return {\n        submitMintAudit,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useSubmitExchangeAudit = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const submitExchangeAudit = (tokenId, carbonValue)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'submitExchangeAudit',\n            args: [\n                tokenId,\n                carbonValue\n            ]\n        });\n    };\n    return {\n        submitExchangeAudit,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useCompleteExchangeAudit = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const completeExchangeAudit = (tokenId, status)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'completeExchangeAudit',\n            args: [\n                tokenId,\n                status\n            ]\n        });\n    };\n    return {\n        completeExchangeAudit,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useAddAuditor = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const addAuditor = (auditorAddress)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'addAuditor',\n            args: [\n                auditorAddress\n            ]\n        });\n    };\n    return {\n        addAuditor,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useRemoveAuditor = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const removeAuditor = (auditorAddress)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'removeAuditor',\n            args: [\n                auditorAddress\n            ]\n        });\n    };\n    return {\n        removeAuditor,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useAddBusinessContract = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const addBusinessContract = (contractAddress)=>{\n        writeContract({\n            address: getContractAddress(chainId),\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'addBusinessContract',\n            args: [\n                contractAddress\n            ]\n        });\n    };\n    return {\n        addBusinessContract,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useRemoveBusinessContract = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const removeBusinessContract = (contractAddress)=>{\n        writeContract({\n            address: getContractAddress(chainId),\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'removeBusinessContract',\n            args: [\n                contractAddress\n            ]\n        });\n    };\n    return {\n        removeBusinessContract,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useUpdateNFTPriceByBusiness = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const updateNFTPrice = (tokenId, newPrice)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'updateNFTPriceByBusiness',\n            args: [\n                tokenId,\n                newPrice\n            ]\n        });\n    };\n    return {\n        updateNFTPrice,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useIsAuditor = (address)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'auditors',\n        args: [\n            address\n        ]\n    });\n};\nconst useIsBusinessContract = (address)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'businessContracts',\n        args: [\n            address\n        ]\n    });\n};\nconst useGetAudit = (tokenId)=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'audits',\n        args: [\n            tokenId\n        ]\n    });\n};\nconst useGetOwner = ()=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'owner'\n    });\n};\nconst useGetCarbonToken = ()=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'carbonToken'\n    });\n};\nconst useGetGreenTalesNFT = ()=>{\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    return (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useReadContract)({\n        address: contractAddress,\n        abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n        functionName: 'greenTalesNFT'\n    });\n};\n// =============================================================================\n// 系统初始化 Hooks\n// =============================================================================\nconst useInitialize = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const initialize = ()=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'initialize'\n        });\n    };\n    return {\n        initialize,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\nconst useSetNFTContract = ()=>{\n    const { writeContract, data: hash, error, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWriteContract)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const { isLoading: isConfirming, isSuccess: isConfirmed } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useWaitForTransactionReceipt)({\n        hash\n    });\n    const setNFTContract = (greenTalesNFTAddress)=>{\n        writeContract({\n            address: contractAddress,\n            abi: _abi_GreenTrace_json__WEBPACK_IMPORTED_MODULE_1__,\n            functionName: 'setNFTContract',\n            args: [\n                greenTalesNFTAddress\n            ]\n        });\n    };\n    return {\n        setNFTContract,\n        hash,\n        error,\n        isPending,\n        isConfirming,\n        isConfirmed\n    };\n};\n// =============================================================================\n// 组合 Hook - 提供常用的组合功能\n// =============================================================================\nconst useGreenTrace = ()=>{\n    const { address } = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useAccount)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const contractAddress = getContractAddress(chainId);\n    const constants = useGreenTraceConstants();\n    const isAuditor = useIsAuditor(address);\n    const isBusinessContract = useIsBusinessContract(address);\n    return {\n        contractAddress,\n        constants,\n        isAuditor: isAuditor.data,\n        isBusinessContract: isBusinessContract.data,\n        // 铸造功能\n        ...useRequestMintNFT(),\n        // 兑换功能\n        ...useRequestExchangeNFT(),\n        // 审计功能\n        ...useSubmitMintAudit(),\n        ...useSubmitExchangeAudit()\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/contracts/hooks/useGreenTrace.ts\n"));

/***/ })

});