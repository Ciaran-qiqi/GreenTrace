// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuditCompleted extends ethereum.Event {
  get params(): AuditCompleted__Params {
    return new AuditCompleted__Params(this);
  }
}

export class AuditCompleted__Params {
  _event: AuditCompleted;

  constructor(event: AuditCompleted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get auditType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class AuditRejected extends ethereum.Event {
  get params(): AuditRejected__Params {
    return new AuditRejected__Params(this);
  }
}

export class AuditRejected__Params {
  _event: AuditRejected;

  constructor(event: AuditRejected) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class AuditSubmitted extends ethereum.Event {
  get params(): AuditSubmitted__Params {
    return new AuditSubmitted__Params(this);
  }
}

export class AuditSubmitted__Params {
  _event: AuditSubmitted;

  constructor(event: AuditSubmitted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get carbonValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auditType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class AuditorAdded extends ethereum.Event {
  get params(): AuditorAdded__Params {
    return new AuditorAdded__Params(this);
  }
}

export class AuditorAdded__Params {
  _event: AuditorAdded;

  constructor(event: AuditorAdded) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AuditorRemoved extends ethereum.Event {
  get params(): AuditorRemoved__Params {
    return new AuditorRemoved__Params(this);
  }
}

export class AuditorRemoved__Params {
  _event: AuditorRemoved;

  constructor(event: AuditorRemoved) {
    this._event = event;
  }

  get auditor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BusinessContractAdded extends ethereum.Event {
  get params(): BusinessContractAdded__Params {
    return new BusinessContractAdded__Params(this);
  }
}

export class BusinessContractAdded__Params {
  _event: BusinessContractAdded;

  constructor(event: BusinessContractAdded) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BusinessContractRemoved extends ethereum.Event {
  get params(): BusinessContractRemoved__Params {
    return new BusinessContractRemoved__Params(this);
  }
}

export class BusinessContractRemoved__Params {
  _event: BusinessContractRemoved;

  constructor(event: BusinessContractRemoved) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ContractInitialized extends ethereum.Event {
  get params(): ContractInitialized__Params {
    return new ContractInitialized__Params(this);
  }
}

export class ContractInitialized__Params {
  _event: ContractInitialized;

  constructor(event: ContractInitialized) {
    this._event = event;
  }

  get carbonToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get greenTalesNFT(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExchangeRequested extends ethereum.Event {
  get params(): ExchangeRequested__Params {
    return new ExchangeRequested__Params(this);
  }
}

export class ExchangeRequested__Params {
  _event: ExchangeRequested;

  constructor(event: ExchangeRequested) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get basePrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeDistribution extends ethereum.Event {
  get params(): FeeDistribution__Params {
    return new FeeDistribution__Params(this);
  }
}

export class FeeDistribution__Params {
  _event: FeeDistribution;

  constructor(event: FeeDistribution) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get systemFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auditFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get returnAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class MintRequested extends ethereum.Event {
  get params(): MintRequested__Params {
    return new MintRequested__Params(this);
  }
}

export class MintRequested__Params {
  _event: MintRequested;

  constructor(event: MintRequested) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[2].value.toString();
  }

  get details(): string {
    return this._event.parameters[3].value.toString();
  }

  get carbonReduction(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[5].value.toString();
  }

  get totalFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class NFTExchanged extends ethereum.Event {
  get params(): NFTExchanged__Params {
    return new NFTExchanged__Params(this);
  }
}

export class NFTExchanged__Params {
  _event: NFTExchanged;

  constructor(event: NFTExchanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get carbonAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTMintedAfterAudit extends ethereum.Event {
  get params(): NFTMintedAfterAudit__Params {
    return new NFTMintedAfterAudit__Params(this);
  }
}

export class NFTMintedAfterAudit__Params {
  _event: NFTMintedAfterAudit;

  constructor(event: NFTMintedAfterAudit) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[2].value.toString();
  }

  get carbonReduction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTMintedByBusiness extends ethereum.Event {
  get params(): NFTMintedByBusiness__Params {
    return new NFTMintedByBusiness__Params(this);
  }
}

export class NFTMintedByBusiness__Params {
  _event: NFTMintedByBusiness;

  constructor(event: NFTMintedByBusiness) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[2].value.toString();
  }

  get carbonReduction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTPriceUpdatedByBusiness extends ethereum.Event {
  get params(): NFTPriceUpdatedByBusiness__Params {
    return new NFTPriceUpdatedByBusiness__Params(this);
  }
}

export class NFTPriceUpdatedByBusiness__Params {
  _event: NFTPriceUpdatedByBusiness;

  constructor(event: NFTPriceUpdatedByBusiness) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GreenTrace__auditsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getAuditor(): Address {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }

  getCarbonValue(): BigInt {
    return this.value2;
  }

  getStatus(): i32 {
    return this.value3;
  }

  getAuditType(): i32 {
    return this.value4;
  }

  getTimestamp(): BigInt {
    return this.value5;
  }
}

export class GreenTrace extends ethereum.SmartContract {
  static bind(address: Address): GreenTrace {
    return new GreenTrace("GreenTrace", address);
  }

  AUDIT_FEE_RATE(): BigInt {
    let result = super.call("AUDIT_FEE_RATE", "AUDIT_FEE_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_AUDIT_FEE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AUDIT_FEE_RATE",
      "AUDIT_FEE_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BASE_RATE(): BigInt {
    let result = super.call("BASE_RATE", "BASE_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_RATE", "BASE_RATE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SYSTEM_FEE_RATE(): BigInt {
    let result = super.call(
      "SYSTEM_FEE_RATE",
      "SYSTEM_FEE_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SYSTEM_FEE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SYSTEM_FEE_RATE",
      "SYSTEM_FEE_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auditors(param0: Address): boolean {
    let result = super.call("auditors", "auditors(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_auditors(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("auditors", "auditors(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  audits(param0: BigInt): GreenTrace__auditsResult {
    let result = super.call(
      "audits",
      "audits(uint256):(address,uint256,uint256,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GreenTrace__auditsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt()
    );
  }

  try_audits(param0: BigInt): ethereum.CallResult<GreenTrace__auditsResult> {
    let result = super.tryCall(
      "audits",
      "audits(uint256):(address,uint256,uint256,uint8,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTrace__auditsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt()
      )
    );
  }

  businessContracts(param0: Address): boolean {
    let result = super.call(
      "businessContracts",
      "businessContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_businessContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "businessContracts",
      "businessContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateAuditFee(amount: BigInt): BigInt {
    let result = super.call(
      "calculateAuditFee",
      "calculateAuditFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateAuditFee(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateAuditFee",
      "calculateAuditFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateRequestFee(_carbonReduction: BigInt): BigInt {
    let result = super.call(
      "calculateRequestFee",
      "calculateRequestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_carbonReduction)]
    );

    return result[0].toBigInt();
  }

  try_calculateRequestFee(
    _carbonReduction: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRequestFee",
      "calculateRequestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_carbonReduction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateReturnAmount(amount: BigInt): BigInt {
    let result = super.call(
      "calculateReturnAmount",
      "calculateReturnAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateReturnAmount(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateReturnAmount",
      "calculateReturnAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSystemFee(amount: BigInt): BigInt {
    let result = super.call(
      "calculateSystemFee",
      "calculateSystemFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateSystemFee(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSystemFee",
      "calculateSystemFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  carbonToken(): Address {
    let result = super.call("carbonToken", "carbonToken():(address)", []);

    return result[0].toAddress();
  }

  try_carbonToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("carbonToken", "carbonToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  greenTalesNFT(): Address {
    let result = super.call("greenTalesNFT", "greenTalesNFT():(address)", []);

    return result[0].toAddress();
  }

  try_greenTalesNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "greenTalesNFT",
      "greenTalesNFT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTestEnvironment(): boolean {
    let result = super.call(
      "isTestEnvironment",
      "isTestEnvironment():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isTestEnvironment(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTestEnvironment",
      "isTestEnvironment():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintNFTByBusiness(
    _recipient: Address,
    _title: string,
    _storyDetails: string,
    _carbonReduction: BigInt,
    _initialPrice: BigInt,
    _tokenURI: string
  ): BigInt {
    let result = super.call(
      "mintNFTByBusiness",
      "mintNFTByBusiness(address,string,string,uint256,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_storyDetails),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromUnsignedBigInt(_initialPrice),
        ethereum.Value.fromString(_tokenURI)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintNFTByBusiness(
    _recipient: Address,
    _title: string,
    _storyDetails: string,
    _carbonReduction: BigInt,
    _initialPrice: BigInt,
    _tokenURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintNFTByBusiness",
      "mintNFTByBusiness(address,string,string,uint256,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_storyDetails),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromUnsignedBigInt(_initialPrice),
        ethereum.Value.fromString(_tokenURI)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payAndMintNFT(
    _tokenId: BigInt,
    _to: Address,
    _title: string,
    _details: string,
    _carbonReduction: BigInt,
    _tokenURI: string
  ): BigInt {
    let result = super.call(
      "payAndMintNFT",
      "payAndMintNFT(uint256,address,string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromString(_tokenURI)
      ]
    );

    return result[0].toBigInt();
  }

  try_payAndMintNFT(
    _tokenId: BigInt,
    _to: Address,
    _title: string,
    _details: string,
    _carbonReduction: BigInt,
    _tokenURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payAndMintNFT",
      "payAndMintNFT(uint256,address,string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromString(_tokenURI)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestMintNFT(
    _title: string,
    _storyDetails: string,
    _carbonReduction: BigInt,
    _tokenURI: string
  ): BigInt {
    let result = super.call(
      "requestMintNFT",
      "requestMintNFT(string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_storyDetails),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromString(_tokenURI)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestMintNFT(
    _title: string,
    _storyDetails: string,
    _carbonReduction: BigInt,
    _tokenURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestMintNFT",
      "requestMintNFT(string,string,uint256,string):(uint256)",
      [
        ethereum.Value.fromString(_title),
        ethereum.Value.fromString(_storyDetails),
        ethereum.Value.fromUnsignedBigInt(_carbonReduction),
        ethereum.Value.fromString(_tokenURI)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _greenTalesNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAuditorCall extends ethereum.Call {
  get inputs(): AddAuditorCall__Inputs {
    return new AddAuditorCall__Inputs(this);
  }

  get outputs(): AddAuditorCall__Outputs {
    return new AddAuditorCall__Outputs(this);
  }
}

export class AddAuditorCall__Inputs {
  _call: AddAuditorCall;

  constructor(call: AddAuditorCall) {
    this._call = call;
  }

  get _auditor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuditorCall__Outputs {
  _call: AddAuditorCall;

  constructor(call: AddAuditorCall) {
    this._call = call;
  }
}

export class AddBusinessContractCall extends ethereum.Call {
  get inputs(): AddBusinessContractCall__Inputs {
    return new AddBusinessContractCall__Inputs(this);
  }

  get outputs(): AddBusinessContractCall__Outputs {
    return new AddBusinessContractCall__Outputs(this);
  }
}

export class AddBusinessContractCall__Inputs {
  _call: AddBusinessContractCall;

  constructor(call: AddBusinessContractCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBusinessContractCall__Outputs {
  _call: AddBusinessContractCall;

  constructor(call: AddBusinessContractCall) {
    this._call = call;
  }
}

export class CompleteExchangeAuditCall extends ethereum.Call {
  get inputs(): CompleteExchangeAuditCall__Inputs {
    return new CompleteExchangeAuditCall__Inputs(this);
  }

  get outputs(): CompleteExchangeAuditCall__Outputs {
    return new CompleteExchangeAuditCall__Outputs(this);
  }
}

export class CompleteExchangeAuditCall__Inputs {
  _call: CompleteExchangeAuditCall;

  constructor(call: CompleteExchangeAuditCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _status(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CompleteExchangeAuditCall__Outputs {
  _call: CompleteExchangeAuditCall;

  constructor(call: CompleteExchangeAuditCall) {
    this._call = call;
  }
}

export class ExchangeNFTCall extends ethereum.Call {
  get inputs(): ExchangeNFTCall__Inputs {
    return new ExchangeNFTCall__Inputs(this);
  }

  get outputs(): ExchangeNFTCall__Outputs {
    return new ExchangeNFTCall__Outputs(this);
  }
}

export class ExchangeNFTCall__Inputs {
  _call: ExchangeNFTCall;

  constructor(call: ExchangeNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExchangeNFTCall__Outputs {
  _call: ExchangeNFTCall;

  constructor(call: ExchangeNFTCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintNFTByBusinessCall extends ethereum.Call {
  get inputs(): MintNFTByBusinessCall__Inputs {
    return new MintNFTByBusinessCall__Inputs(this);
  }

  get outputs(): MintNFTByBusinessCall__Outputs {
    return new MintNFTByBusinessCall__Outputs(this);
  }
}

export class MintNFTByBusinessCall__Inputs {
  _call: MintNFTByBusinessCall;

  constructor(call: MintNFTByBusinessCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _storyDetails(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _carbonReduction(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _initialPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class MintNFTByBusinessCall__Outputs {
  _call: MintNFTByBusinessCall;

  constructor(call: MintNFTByBusinessCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PayAndMintNFTCall extends ethereum.Call {
  get inputs(): PayAndMintNFTCall__Inputs {
    return new PayAndMintNFTCall__Inputs(this);
  }

  get outputs(): PayAndMintNFTCall__Outputs {
    return new PayAndMintNFTCall__Outputs(this);
  }
}

export class PayAndMintNFTCall__Inputs {
  _call: PayAndMintNFTCall;

  constructor(call: PayAndMintNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _title(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _details(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _carbonReduction(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class PayAndMintNFTCall__Outputs {
  _call: PayAndMintNFTCall;

  constructor(call: PayAndMintNFTCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveAuditorCall extends ethereum.Call {
  get inputs(): RemoveAuditorCall__Inputs {
    return new RemoveAuditorCall__Inputs(this);
  }

  get outputs(): RemoveAuditorCall__Outputs {
    return new RemoveAuditorCall__Outputs(this);
  }
}

export class RemoveAuditorCall__Inputs {
  _call: RemoveAuditorCall;

  constructor(call: RemoveAuditorCall) {
    this._call = call;
  }

  get _auditor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuditorCall__Outputs {
  _call: RemoveAuditorCall;

  constructor(call: RemoveAuditorCall) {
    this._call = call;
  }
}

export class RemoveBusinessContractCall extends ethereum.Call {
  get inputs(): RemoveBusinessContractCall__Inputs {
    return new RemoveBusinessContractCall__Inputs(this);
  }

  get outputs(): RemoveBusinessContractCall__Outputs {
    return new RemoveBusinessContractCall__Outputs(this);
  }
}

export class RemoveBusinessContractCall__Inputs {
  _call: RemoveBusinessContractCall;

  constructor(call: RemoveBusinessContractCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveBusinessContractCall__Outputs {
  _call: RemoveBusinessContractCall;

  constructor(call: RemoveBusinessContractCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestExchangeNFTCall extends ethereum.Call {
  get inputs(): RequestExchangeNFTCall__Inputs {
    return new RequestExchangeNFTCall__Inputs(this);
  }

  get outputs(): RequestExchangeNFTCall__Outputs {
    return new RequestExchangeNFTCall__Outputs(this);
  }
}

export class RequestExchangeNFTCall__Inputs {
  _call: RequestExchangeNFTCall;

  constructor(call: RequestExchangeNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestExchangeNFTCall__Outputs {
  _call: RequestExchangeNFTCall;

  constructor(call: RequestExchangeNFTCall) {
    this._call = call;
  }
}

export class RequestMintNFTCall extends ethereum.Call {
  get inputs(): RequestMintNFTCall__Inputs {
    return new RequestMintNFTCall__Inputs(this);
  }

  get outputs(): RequestMintNFTCall__Outputs {
    return new RequestMintNFTCall__Outputs(this);
  }
}

export class RequestMintNFTCall__Inputs {
  _call: RequestMintNFTCall;

  constructor(call: RequestMintNFTCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _storyDetails(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _carbonReduction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class RequestMintNFTCall__Outputs {
  _call: RequestMintNFTCall;

  constructor(call: RequestMintNFTCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetNFTContractCall extends ethereum.Call {
  get inputs(): SetNFTContractCall__Inputs {
    return new SetNFTContractCall__Inputs(this);
  }

  get outputs(): SetNFTContractCall__Outputs {
    return new SetNFTContractCall__Outputs(this);
  }
}

export class SetNFTContractCall__Inputs {
  _call: SetNFTContractCall;

  constructor(call: SetNFTContractCall) {
    this._call = call;
  }

  get _greenTalesNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNFTContractCall__Outputs {
  _call: SetNFTContractCall;

  constructor(call: SetNFTContractCall) {
    this._call = call;
  }
}

export class SubmitExchangeAuditCall extends ethereum.Call {
  get inputs(): SubmitExchangeAuditCall__Inputs {
    return new SubmitExchangeAuditCall__Inputs(this);
  }

  get outputs(): SubmitExchangeAuditCall__Outputs {
    return new SubmitExchangeAuditCall__Outputs(this);
  }
}

export class SubmitExchangeAuditCall__Inputs {
  _call: SubmitExchangeAuditCall;

  constructor(call: SubmitExchangeAuditCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _carbonValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitExchangeAuditCall__Outputs {
  _call: SubmitExchangeAuditCall;

  constructor(call: SubmitExchangeAuditCall) {
    this._call = call;
  }
}

export class SubmitMintAuditCall extends ethereum.Call {
  get inputs(): SubmitMintAuditCall__Inputs {
    return new SubmitMintAuditCall__Inputs(this);
  }

  get outputs(): SubmitMintAuditCall__Outputs {
    return new SubmitMintAuditCall__Outputs(this);
  }
}

export class SubmitMintAuditCall__Inputs {
  _call: SubmitMintAuditCall;

  constructor(call: SubmitMintAuditCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _carbonValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SubmitMintAuditCall__Outputs {
  _call: SubmitMintAuditCall;

  constructor(call: SubmitMintAuditCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateNFTPriceByBusinessCall extends ethereum.Call {
  get inputs(): UpdateNFTPriceByBusinessCall__Inputs {
    return new UpdateNFTPriceByBusinessCall__Inputs(this);
  }

  get outputs(): UpdateNFTPriceByBusinessCall__Outputs {
    return new UpdateNFTPriceByBusinessCall__Outputs(this);
  }
}

export class UpdateNFTPriceByBusinessCall__Inputs {
  _call: UpdateNFTPriceByBusinessCall;

  constructor(call: UpdateNFTPriceByBusinessCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateNFTPriceByBusinessCall__Outputs {
  _call: UpdateNFTPriceByBusinessCall;

  constructor(call: UpdateNFTPriceByBusinessCall) {
    this._call = call;
  }
}
