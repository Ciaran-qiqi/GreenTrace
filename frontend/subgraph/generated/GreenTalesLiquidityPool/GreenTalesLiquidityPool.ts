// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CarbonPriceOracleUpdated extends ethereum.Event {
  get params(): CarbonPriceOracleUpdated__Params {
    return new CarbonPriceOracleUpdated__Params(this);
  }
}

export class CarbonPriceOracleUpdated__Params {
  _event: CarbonPriceOracleUpdated;

  constructor(event: CarbonPriceOracleUpdated) {
    this._event = event;
  }

  get oldOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EmergencyPaused extends ethereum.Event {
  get params(): EmergencyPaused__Params {
    return new EmergencyPaused__Params(this);
  }
}

export class EmergencyPaused__Params {
  _event: EmergencyPaused;

  constructor(event: EmergencyPaused) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paused(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeRateUpdated extends ethereum.Event {
  get params(): FeeRateUpdated__Params {
    return new FeeRateUpdated__Params(this);
  }
}

export class FeeRateUpdated__Params {
  _event: FeeRateUpdated;

  constructor(event: FeeRateUpdated) {
    this._event = event;
  }

  get oldFeeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFeeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeSharesUpdated extends ethereum.Event {
  get params(): FeeSharesUpdated__Params {
    return new FeeSharesUpdated__Params(this);
  }
}

export class FeeSharesUpdated__Params {
  _event: FeeSharesUpdated;

  constructor(event: FeeSharesUpdated) {
    this._event = event;
  }

  get oldPlatformShare(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldLpShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newPlatformShare(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newLpShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get carbonAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdtAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lpTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get carbonAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdtAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lpTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeesWithdrawn extends ethereum.Event {
  get params(): PlatformFeesWithdrawn__Params {
    return new PlatformFeesWithdrawn__Params(this);
  }
}

export class PlatformFeesWithdrawn__Params {
  _event: PlatformFeesWithdrawn;

  constructor(event: PlatformFeesWithdrawn) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PoolStatsUpdated extends ethereum.Event {
  get params(): PoolStatsUpdated__Params {
    return new PoolStatsUpdated__Params(this);
  }
}

export class PoolStatsUpdated__Params {
  _event: PoolStatsUpdated;

  constructor(event: PoolStatsUpdated) {
    this._event = event;
  }

  get totalCarbon(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalUsdt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalLP(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PriceDeviationChecked extends ethereum.Event {
  get params(): PriceDeviationChecked__Params {
    return new PriceDeviationChecked__Params(this);
  }
}

export class PriceDeviationChecked__Params {
  _event: PriceDeviationChecked;

  constructor(event: PriceDeviationChecked) {
    this._event = event;
  }

  get referencePrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get marketPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deviation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isDeviated(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class PriceDeviationThresholdUpdated extends ethereum.Event {
  get params(): PriceDeviationThresholdUpdated__Params {
    return new PriceDeviationThresholdUpdated__Params(this);
  }
}

export class PriceDeviationThresholdUpdated__Params {
  _event: PriceDeviationThresholdUpdated;

  constructor(event: PriceDeviationThresholdUpdated) {
    this._event = event;
  }

  get oldThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get carbonPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SwapBlockedByPriceDeviation extends ethereum.Event {
  get params(): SwapBlockedByPriceDeviation__Params {
    return new SwapBlockedByPriceDeviation__Params(this);
  }
}

export class SwapBlockedByPriceDeviation__Params {
  _event: SwapBlockedByPriceDeviation;

  constructor(event: SwapBlockedByPriceDeviation) {
    this._event = event;
  }

  get referencePrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get marketPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deviation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensSwapped extends ethereum.Event {
  get params(): TokensSwapped__Params {
    return new TokensSwapped__Params(this);
  }
}

export class TokensSwapped__Params {
  _event: TokensSwapped;

  constructor(event: TokensSwapped) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UserFeesClaimed extends ethereum.Event {
  get params(): UserFeesClaimed__Params {
    return new UserFeesClaimed__Params(this);
  }
}

export class UserFeesClaimed__Params {
  _event: UserFeesClaimed;

  constructor(event: UserFeesClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GreenTalesLiquidityPool__calculateUserFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCarbonFees(): BigInt {
    return this.value0;
  }

  getUsdtFees(): BigInt {
    return this.value1;
  }
}

export class GreenTalesLiquidityPool__checkLiquiditySufficiencyResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getHasEnough(): boolean {
    return this.value0;
  }

  getCurrentLP(): BigInt {
    return this.value1;
  }

  getRequiredLP(): BigInt {
    return this.value2;
  }
}

export class GreenTalesLiquidityPool__claimFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCarbonFees(): BigInt {
    return this.value0;
  }

  getUsdtFees(): BigInt {
    return this.value1;
  }
}

export class GreenTalesLiquidityPool__getAddLiquidityEstimateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLpTokens(): BigInt {
    return this.value0;
  }

  getCarbonShare(): BigInt {
    return this.value1;
  }

  getUsdtShare(): BigInt {
    return this.value2;
  }
}

export class GreenTalesLiquidityPool__getContractBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCarbonBalance(): BigInt {
    return this.value0;
  }

  getUsdtBalance(): BigInt {
    return this.value1;
  }
}

export class GreenTalesLiquidityPool__getDetailedAddLiquidityEstimateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLpTokens(): BigInt {
    return this.value0;
  }

  getCarbonShare(): BigInt {
    return this.value1;
  }

  getUsdtShare(): BigInt {
    return this.value2;
  }

  getPriceImpact(): BigInt {
    return this.value3;
  }

  getNewPrice(): BigInt {
    return this.value4;
  }
}

export class GreenTalesLiquidityPool__getDetailedSwapEstimateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getFee(): BigInt {
    return this.value1;
  }

  getPriceImpact(): BigInt {
    return this.value2;
  }

  getNewPrice(): BigInt {
    return this.value3;
  }
}

export class GreenTalesLiquidityPool__getFeeStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPlatformCarbonFees(): BigInt {
    return this.value0;
  }

  getPlatformUsdtFees(): BigInt {
    return this.value1;
  }

  getTotalLpCarbonFees(): BigInt {
    return this.value2;
  }

  getTotalLpUsdtFees(): BigInt {
    return this.value3;
  }
}

export class GreenTalesLiquidityPool__getLiquidityProviderInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getLpTokens(): BigInt {
    return this.value0;
  }

  getCarbonShare(): BigInt {
    return this.value1;
  }

  getUsdtShare(): BigInt {
    return this.value2;
  }

  getSharePercentage(): BigInt {
    return this.value3;
  }
}

export class GreenTalesLiquidityPool__getPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getTotalCarbon(): BigInt {
    return this.value0;
  }

  getTotalUsdt(): BigInt {
    return this.value1;
  }

  getTotalLP(): BigInt {
    return this.value2;
  }

  getCurrentPrice(): BigInt {
    return this.value3;
  }

  getOraclePrice(): BigInt {
    return this.value4;
  }

  getPriceDeviated(): boolean {
    return this.value5;
  }

  getDeviationPercent(): BigInt {
    return this.value6;
  }

  getCurrentFeeRate(): BigInt {
    return this.value7;
  }

  getIsPaused(): boolean {
    return this.value8;
  }
}

export class GreenTalesLiquidityPool__getPoolStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getTotalCarbon(): BigInt {
    return this.value0;
  }

  getTotalUsdt(): BigInt {
    return this.value1;
  }

  getTotalLP(): BigInt {
    return this.value2;
  }

  getCurrentPrice(): BigInt {
    return this.value3;
  }

  getSwapCount(): BigInt {
    return this.value4;
  }

  getTotalVolume(): BigInt {
    return this.value5;
  }

  getTotalFees(): BigInt {
    return this.value6;
  }

  getTotalProviders(): BigInt {
    return this.value7;
  }
}

export class GreenTalesLiquidityPool__getPriceDeviationDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getReferencePrice(): BigInt {
    return this.value0;
  }

  getMarketPrice(): BigInt {
    return this.value1;
  }

  getDeviation(): BigInt {
    return this.value2;
  }

  getThreshold(): BigInt {
    return this.value3;
  }

  getIsDeviated(): boolean {
    return this.value4;
  }
}

export class GreenTalesLiquidityPool__getRemoveLiquidityEstimateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getCarbonAmount(): BigInt {
    return this.value0;
  }

  getUsdtAmount(): BigInt {
    return this.value1;
  }

  getSharePercentage(): BigInt {
    return this.value2;
  }
}

export class GreenTalesLiquidityPool__getSwapEstimateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getFee(): BigInt {
    return this.value1;
  }

  getPriceImpact(): BigInt {
    return this.value2;
  }
}

export class GreenTalesLiquidityPool__getSwapHistoryResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTotalCarbonSwapped(): BigInt {
    return this.value0;
  }

  getTotalUsdtSwapped(): BigInt {
    return this.value1;
  }

  getAverageSwapSize(): BigInt {
    return this.value2;
  }

  getLargestSwap(): BigInt {
    return this.value3;
  }
}

export class GreenTalesLiquidityPool__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCarbonAmount(): BigInt {
    return this.value0;
  }

  getUsdtAmount(): BigInt {
    return this.value1;
  }
}

export class GreenTalesLiquidityPool extends ethereum.SmartContract {
  static bind(address: Address): GreenTalesLiquidityPool {
    return new GreenTalesLiquidityPool("GreenTalesLiquidityPool", address);
  }

  BASE_RATE(): BigInt {
    let result = super.call("BASE_RATE", "BASE_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_RATE", "BASE_RATE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addLiquidity(carbonAmount: BigInt, usdtAmount: BigInt): BigInt {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(carbonAmount),
        ethereum.Value.fromUnsignedBigInt(usdtAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addLiquidity(
    carbonAmount: BigInt,
    usdtAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(carbonAmount),
        ethereum.Value.fromUnsignedBigInt(usdtAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateUserFees(
    _user: Address
  ): GreenTalesLiquidityPool__calculateUserFeesResult {
    let result = super.call(
      "calculateUserFees",
      "calculateUserFees(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new GreenTalesLiquidityPool__calculateUserFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateUserFees(
    _user: Address
  ): ethereum.CallResult<GreenTalesLiquidityPool__calculateUserFeesResult> {
    let result = super.tryCall(
      "calculateUserFees",
      "calculateUserFees(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__calculateUserFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  carbonPriceOracle(): Address {
    let result = super.call(
      "carbonPriceOracle",
      "carbonPriceOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_carbonPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "carbonPriceOracle",
      "carbonPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  carbonToken(): Address {
    let result = super.call("carbonToken", "carbonToken():(address)", []);

    return result[0].toAddress();
  }

  try_carbonToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("carbonToken", "carbonToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkLiquiditySufficiency(
    _user: Address,
    _lpTokens: BigInt
  ): GreenTalesLiquidityPool__checkLiquiditySufficiencyResult {
    let result = super.call(
      "checkLiquiditySufficiency",
      "checkLiquiditySufficiency(address,uint256):(bool,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lpTokens)
      ]
    );

    return new GreenTalesLiquidityPool__checkLiquiditySufficiencyResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_checkLiquiditySufficiency(
    _user: Address,
    _lpTokens: BigInt
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__checkLiquiditySufficiencyResult
  > {
    let result = super.tryCall(
      "checkLiquiditySufficiency",
      "checkLiquiditySufficiency(address,uint256):(bool,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lpTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__checkLiquiditySufficiencyResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  claimFees(): GreenTalesLiquidityPool__claimFeesResult {
    let result = super.call("claimFees", "claimFees():(uint256,uint256)", []);

    return new GreenTalesLiquidityPool__claimFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimFees(): ethereum.CallResult<
    GreenTalesLiquidityPool__claimFeesResult
  > {
    let result = super.tryCall(
      "claimFees",
      "claimFees():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__claimFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  feeRate(): BigInt {
    let result = super.call("feeRate", "feeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRate", "feeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAddLiquidityEstimate(
    _carbonAmount: BigInt,
    _usdtAmount: BigInt
  ): GreenTalesLiquidityPool__getAddLiquidityEstimateResult {
    let result = super.call(
      "getAddLiquidityEstimate",
      "getAddLiquidityEstimate(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_carbonAmount),
        ethereum.Value.fromUnsignedBigInt(_usdtAmount)
      ]
    );

    return new GreenTalesLiquidityPool__getAddLiquidityEstimateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAddLiquidityEstimate(
    _carbonAmount: BigInt,
    _usdtAmount: BigInt
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__getAddLiquidityEstimateResult
  > {
    let result = super.tryCall(
      "getAddLiquidityEstimate",
      "getAddLiquidityEstimate(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_carbonAmount),
        ethereum.Value.fromUnsignedBigInt(_usdtAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getAddLiquidityEstimateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCarbonPrice(): BigInt {
    let result = super.call("getCarbonPrice", "getCarbonPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCarbonPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCarbonPrice",
      "getCarbonPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCarbonPriceUSD(): BigInt {
    let result = super.call(
      "getCarbonPriceUSD",
      "getCarbonPriceUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCarbonPriceUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCarbonPriceUSD",
      "getCarbonPriceUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalances(): GreenTalesLiquidityPool__getContractBalancesResult {
    let result = super.call(
      "getContractBalances",
      "getContractBalances():(uint256,uint256)",
      []
    );

    return new GreenTalesLiquidityPool__getContractBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getContractBalances(): ethereum.CallResult<
    GreenTalesLiquidityPool__getContractBalancesResult
  > {
    let result = super.tryCall(
      "getContractBalances",
      "getContractBalances():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getContractBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getDetailedAddLiquidityEstimate(
    _carbonAmount: BigInt,
    _usdtAmount: BigInt
  ): GreenTalesLiquidityPool__getDetailedAddLiquidityEstimateResult {
    let result = super.call(
      "getDetailedAddLiquidityEstimate",
      "getDetailedAddLiquidityEstimate(uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_carbonAmount),
        ethereum.Value.fromUnsignedBigInt(_usdtAmount)
      ]
    );

    return new GreenTalesLiquidityPool__getDetailedAddLiquidityEstimateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getDetailedAddLiquidityEstimate(
    _carbonAmount: BigInt,
    _usdtAmount: BigInt
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__getDetailedAddLiquidityEstimateResult
  > {
    let result = super.tryCall(
      "getDetailedAddLiquidityEstimate",
      "getDetailedAddLiquidityEstimate(uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_carbonAmount),
        ethereum.Value.fromUnsignedBigInt(_usdtAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getDetailedAddLiquidityEstimateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getDetailedSwapEstimate(
    _amountIn: BigInt,
    _isCarbonToUsdt: boolean
  ): GreenTalesLiquidityPool__getDetailedSwapEstimateResult {
    let result = super.call(
      "getDetailedSwapEstimate",
      "getDetailedSwapEstimate(uint256,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromBoolean(_isCarbonToUsdt)
      ]
    );

    return new GreenTalesLiquidityPool__getDetailedSwapEstimateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getDetailedSwapEstimate(
    _amountIn: BigInt,
    _isCarbonToUsdt: boolean
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__getDetailedSwapEstimateResult
  > {
    let result = super.tryCall(
      "getDetailedSwapEstimate",
      "getDetailedSwapEstimate(uint256,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromBoolean(_isCarbonToUsdt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getDetailedSwapEstimateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getFeeStats(): GreenTalesLiquidityPool__getFeeStatsResult {
    let result = super.call(
      "getFeeStats",
      "getFeeStats():(uint256,uint256,uint256,uint256)",
      []
    );

    return new GreenTalesLiquidityPool__getFeeStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getFeeStats(): ethereum.CallResult<
    GreenTalesLiquidityPool__getFeeStatsResult
  > {
    let result = super.tryCall(
      "getFeeStats",
      "getFeeStats():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getFeeStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getLiquidityProviderInfo(
    _user: Address
  ): GreenTalesLiquidityPool__getLiquidityProviderInfoResult {
    let result = super.call(
      "getLiquidityProviderInfo",
      "getLiquidityProviderInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new GreenTalesLiquidityPool__getLiquidityProviderInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getLiquidityProviderInfo(
    _user: Address
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__getLiquidityProviderInfoResult
  > {
    let result = super.tryCall(
      "getLiquidityProviderInfo",
      "getLiquidityProviderInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getLiquidityProviderInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getOracleReferencePrice(): BigInt {
    let result = super.call(
      "getOracleReferencePrice",
      "getOracleReferencePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOracleReferencePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOracleReferencePrice",
      "getOracleReferencePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(): GreenTalesLiquidityPool__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo():(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool)",
      []
    );

    return new GreenTalesLiquidityPool__getPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_getPoolInfo(): ethereum.CallResult<
    GreenTalesLiquidityPool__getPoolInfoResult
  > {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo():(uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  getPoolStats(): GreenTalesLiquidityPool__getPoolStatsResult {
    let result = super.call(
      "getPoolStats",
      "getPoolStats():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new GreenTalesLiquidityPool__getPoolStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getPoolStats(): ethereum.CallResult<
    GreenTalesLiquidityPool__getPoolStatsResult
  > {
    let result = super.tryCall(
      "getPoolStats",
      "getPoolStats():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getPoolStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  getPriceDeviationDetails(): GreenTalesLiquidityPool__getPriceDeviationDetailsResult {
    let result = super.call(
      "getPriceDeviationDetails",
      "getPriceDeviationDetails():(uint256,uint256,uint256,uint256,bool)",
      []
    );

    return new GreenTalesLiquidityPool__getPriceDeviationDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_getPriceDeviationDetails(): ethereum.CallResult<
    GreenTalesLiquidityPool__getPriceDeviationDetailsResult
  > {
    let result = super.tryCall(
      "getPriceDeviationDetails",
      "getPriceDeviationDetails():(uint256,uint256,uint256,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getPriceDeviationDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  getRemoveLiquidityEstimate(
    _lpTokens: BigInt
  ): GreenTalesLiquidityPool__getRemoveLiquidityEstimateResult {
    let result = super.call(
      "getRemoveLiquidityEstimate",
      "getRemoveLiquidityEstimate(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lpTokens)]
    );

    return new GreenTalesLiquidityPool__getRemoveLiquidityEstimateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getRemoveLiquidityEstimate(
    _lpTokens: BigInt
  ): ethereum.CallResult<
    GreenTalesLiquidityPool__getRemoveLiquidityEstimateResult
  > {
    let result = super.tryCall(
      "getRemoveLiquidityEstimate",
      "getRemoveLiquidityEstimate(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lpTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getRemoveLiquidityEstimateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getSwapEstimate(
    _amountIn: BigInt,
    _isCarbonToUsdt: boolean
  ): GreenTalesLiquidityPool__getSwapEstimateResult {
    let result = super.call(
      "getSwapEstimate",
      "getSwapEstimate(uint256,bool):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromBoolean(_isCarbonToUsdt)
      ]
    );

    return new GreenTalesLiquidityPool__getSwapEstimateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getSwapEstimate(
    _amountIn: BigInt,
    _isCarbonToUsdt: boolean
  ): ethereum.CallResult<GreenTalesLiquidityPool__getSwapEstimateResult> {
    let result = super.tryCall(
      "getSwapEstimate",
      "getSwapEstimate(uint256,bool):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromBoolean(_isCarbonToUsdt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getSwapEstimateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getSwapHistory(): GreenTalesLiquidityPool__getSwapHistoryResult {
    let result = super.call(
      "getSwapHistory",
      "getSwapHistory():(uint256,uint256,uint256,uint256)",
      []
    );

    return new GreenTalesLiquidityPool__getSwapHistoryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getSwapHistory(): ethereum.CallResult<
    GreenTalesLiquidityPool__getSwapHistoryResult
  > {
    let result = super.tryCall(
      "getSwapHistory",
      "getSwapHistory():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__getSwapHistoryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  isPriceDeviated(marketPrice: BigInt): boolean {
    let result = super.call(
      "isPriceDeviated",
      "isPriceDeviated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketPrice)]
    );

    return result[0].toBoolean();
  }

  try_isPriceDeviated(marketPrice: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPriceDeviated",
      "isPriceDeviated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketPrice)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lpFeeShare(): BigInt {
    let result = super.call("lpFeeShare", "lpFeeShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpFeeShare", "lpFeeShare():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  platformFeeShare(): BigInt {
    let result = super.call(
      "platformFeeShare",
      "platformFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeeShare",
      "platformFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformFeesCarbon(): BigInt {
    let result = super.call(
      "platformFeesCarbon",
      "platformFeesCarbon():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeesCarbon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeesCarbon",
      "platformFeesCarbon():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformFeesUsdt(): BigInt {
    let result = super.call(
      "platformFeesUsdt",
      "platformFeesUsdt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeesUsdt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeesUsdt",
      "platformFeesUsdt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceDeviationThreshold(): BigInt {
    let result = super.call(
      "priceDeviationThreshold",
      "priceDeviationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceDeviationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceDeviationThreshold",
      "priceDeviationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidity(
    lpTokens: BigInt
  ): GreenTalesLiquidityPool__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(lpTokens)]
    );

    return new GreenTalesLiquidityPool__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    lpTokens: BigInt
  ): ethereum.CallResult<GreenTalesLiquidityPool__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(lpTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesLiquidityPool__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapCarbonToUsdt(carbonAmount: BigInt): BigInt {
    let result = super.call(
      "swapCarbonToUsdt",
      "swapCarbonToUsdt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(carbonAmount)]
    );

    return result[0].toBigInt();
  }

  try_swapCarbonToUsdt(carbonAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapCarbonToUsdt",
      "swapCarbonToUsdt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(carbonAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapUsdtToCarbon(usdtAmount: BigInt): BigInt {
    let result = super.call(
      "swapUsdtToCarbon",
      "swapUsdtToCarbon(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(usdtAmount)]
    );

    return result[0].toBigInt();
  }

  try_swapUsdtToCarbon(usdtAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapUsdtToCarbon",
      "swapUsdtToCarbon(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(usdtAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCarbonTokens(): BigInt {
    let result = super.call(
      "totalCarbonTokens",
      "totalCarbonTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCarbonTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCarbonTokens",
      "totalCarbonTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeesCollected(): BigInt {
    let result = super.call(
      "totalFeesCollected",
      "totalFeesCollected():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeesCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeesCollected",
      "totalFeesCollected():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLPTokens(): BigInt {
    let result = super.call("totalLPTokens", "totalLPTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLPTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLPTokens",
      "totalLPTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLiquidityProviders(): BigInt {
    let result = super.call(
      "totalLiquidityProviders",
      "totalLiquidityProviders():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLiquidityProviders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLiquidityProviders",
      "totalLiquidityProviders():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLpFeesCarbon(): BigInt {
    let result = super.call(
      "totalLpFeesCarbon",
      "totalLpFeesCarbon():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLpFeesCarbon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLpFeesCarbon",
      "totalLpFeesCarbon():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLpFeesUsdt(): BigInt {
    let result = super.call(
      "totalLpFeesUsdt",
      "totalLpFeesUsdt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLpFeesUsdt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLpFeesUsdt",
      "totalLpFeesUsdt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSwaps(): BigInt {
    let result = super.call("totalSwaps", "totalSwaps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSwaps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSwaps", "totalSwaps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUsdtTokens(): BigInt {
    let result = super.call(
      "totalUsdtTokens",
      "totalUsdtTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUsdtTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUsdtTokens",
      "totalUsdtTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVolumeTraded(): BigInt {
    let result = super.call(
      "totalVolumeTraded",
      "totalVolumeTraded():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalVolumeTraded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVolumeTraded",
      "totalVolumeTraded():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtToken(): Address {
    let result = super.call("usdtToken", "usdtToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdtToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdtToken", "usdtToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userClaimedCarbonFees(param0: Address): BigInt {
    let result = super.call(
      "userClaimedCarbonFees",
      "userClaimedCarbonFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userClaimedCarbonFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userClaimedCarbonFees",
      "userClaimedCarbonFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userClaimedUsdtFees(param0: Address): BigInt {
    let result = super.call(
      "userClaimedUsdtFees",
      "userClaimedUsdtFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userClaimedUsdtFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userClaimedUsdtFees",
      "userClaimedUsdtFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLPTokens(param0: Address): BigInt {
    let result = super.call("userLPTokens", "userLPTokens(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userLPTokens(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userLPTokens",
      "userLPTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLastLpTokens(param0: Address): BigInt {
    let result = super.call(
      "userLastLpTokens",
      "userLastLpTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userLastLpTokens(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userLastLpTokens",
      "userLastLpTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _carbonToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdtToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get carbonAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdtAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get lpTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get carbonFees(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get usdtFees(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get lpTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get carbonAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get usdtAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCarbonPriceOracleCall extends ethereum.Call {
  get inputs(): SetCarbonPriceOracleCall__Inputs {
    return new SetCarbonPriceOracleCall__Inputs(this);
  }

  get outputs(): SetCarbonPriceOracleCall__Outputs {
    return new SetCarbonPriceOracleCall__Outputs(this);
  }
}

export class SetCarbonPriceOracleCall__Inputs {
  _call: SetCarbonPriceOracleCall;

  constructor(call: SetCarbonPriceOracleCall) {
    this._call = call;
  }

  get _carbonPriceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCarbonPriceOracleCall__Outputs {
  _call: SetCarbonPriceOracleCall;

  constructor(call: SetCarbonPriceOracleCall) {
    this._call = call;
  }
}

export class SetFeeRateCall extends ethereum.Call {
  get inputs(): SetFeeRateCall__Inputs {
    return new SetFeeRateCall__Inputs(this);
  }

  get outputs(): SetFeeRateCall__Outputs {
    return new SetFeeRateCall__Outputs(this);
  }
}

export class SetFeeRateCall__Inputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get _feeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeRateCall__Outputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }
}

export class SetFeeSharesCall extends ethereum.Call {
  get inputs(): SetFeeSharesCall__Inputs {
    return new SetFeeSharesCall__Inputs(this);
  }

  get outputs(): SetFeeSharesCall__Outputs {
    return new SetFeeSharesCall__Outputs(this);
  }
}

export class SetFeeSharesCall__Inputs {
  _call: SetFeeSharesCall;

  constructor(call: SetFeeSharesCall) {
    this._call = call;
  }

  get _platformShare(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeSharesCall__Outputs {
  _call: SetFeeSharesCall;

  constructor(call: SetFeeSharesCall) {
    this._call = call;
  }
}

export class SetPriceDeviationThresholdCall extends ethereum.Call {
  get inputs(): SetPriceDeviationThresholdCall__Inputs {
    return new SetPriceDeviationThresholdCall__Inputs(this);
  }

  get outputs(): SetPriceDeviationThresholdCall__Outputs {
    return new SetPriceDeviationThresholdCall__Outputs(this);
  }
}

export class SetPriceDeviationThresholdCall__Inputs {
  _call: SetPriceDeviationThresholdCall;

  constructor(call: SetPriceDeviationThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceDeviationThresholdCall__Outputs {
  _call: SetPriceDeviationThresholdCall;

  constructor(call: SetPriceDeviationThresholdCall) {
    this._call = call;
  }
}

export class SwapCarbonToUsdtCall extends ethereum.Call {
  get inputs(): SwapCarbonToUsdtCall__Inputs {
    return new SwapCarbonToUsdtCall__Inputs(this);
  }

  get outputs(): SwapCarbonToUsdtCall__Outputs {
    return new SwapCarbonToUsdtCall__Outputs(this);
  }
}

export class SwapCarbonToUsdtCall__Inputs {
  _call: SwapCarbonToUsdtCall;

  constructor(call: SwapCarbonToUsdtCall) {
    this._call = call;
  }

  get carbonAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapCarbonToUsdtCall__Outputs {
  _call: SwapCarbonToUsdtCall;

  constructor(call: SwapCarbonToUsdtCall) {
    this._call = call;
  }

  get usdtAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapUsdtToCarbonCall extends ethereum.Call {
  get inputs(): SwapUsdtToCarbonCall__Inputs {
    return new SwapUsdtToCarbonCall__Inputs(this);
  }

  get outputs(): SwapUsdtToCarbonCall__Outputs {
    return new SwapUsdtToCarbonCall__Outputs(this);
  }
}

export class SwapUsdtToCarbonCall__Inputs {
  _call: SwapUsdtToCarbonCall;

  constructor(call: SwapUsdtToCarbonCall) {
    this._call = call;
  }

  get usdtAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapUsdtToCarbonCall__Outputs {
  _call: SwapUsdtToCarbonCall;

  constructor(call: SwapUsdtToCarbonCall) {
    this._call = call;
  }

  get carbonAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdatePoolStatsCall extends ethereum.Call {
  get inputs(): UpdatePoolStatsCall__Inputs {
    return new UpdatePoolStatsCall__Inputs(this);
  }

  get outputs(): UpdatePoolStatsCall__Outputs {
    return new UpdatePoolStatsCall__Outputs(this);
  }
}

export class UpdatePoolStatsCall__Inputs {
  _call: UpdatePoolStatsCall;

  constructor(call: UpdatePoolStatsCall) {
    this._call = call;
  }
}

export class UpdatePoolStatsCall__Outputs {
  _call: UpdatePoolStatsCall;

  constructor(call: UpdatePoolStatsCall) {
    this._call = call;
  }
}

export class WithdrawPlatformFeesCall extends ethereum.Call {
  get inputs(): WithdrawPlatformFeesCall__Inputs {
    return new WithdrawPlatformFeesCall__Inputs(this);
  }

  get outputs(): WithdrawPlatformFeesCall__Outputs {
    return new WithdrawPlatformFeesCall__Outputs(this);
  }
}

export class WithdrawPlatformFeesCall__Inputs {
  _call: WithdrawPlatformFeesCall;

  constructor(call: WithdrawPlatformFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawPlatformFeesCall__Outputs {
  _call: WithdrawPlatformFeesCall;

  constructor(call: WithdrawPlatformFeesCall) {
    this._call = call;
  }
}
