// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeCollectorUpdated extends ethereum.Event {
  get params(): FeeCollectorUpdated__Params {
    return new FeeCollectorUpdated__Params(this);
  }
}

export class FeeCollectorUpdated__Params {
  _event: FeeCollectorUpdated;

  constructor(event: FeeCollectorUpdated) {
    this._event = event;
  }

  get newCollector(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ListingCancelled extends ethereum.Event {
  get params(): ListingCancelled__Params {
    return new ListingCancelled__Params(this);
  }
}

export class ListingCancelled__Params {
  _event: ListingCancelled;

  constructor(event: ListingCancelled) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTListed extends ethereum.Event {
  get params(): NFTListed__Params {
    return new NFTListed__Params(this);
  }
}

export class NFTListed__Params {
  _event: NFTListed;

  constructor(event: NFTListed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTSold extends ethereum.Event {
  get params(): NFTSold__Params {
    return new NFTSold__Params(this);
  }
}

export class NFTSold__Params {
  _event: NFTSold;

  constructor(event: NFTSold) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get platformFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sellerAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeRateUpdated extends ethereum.Event {
  get params(): PlatformFeeRateUpdated__Params {
    return new PlatformFeeRateUpdated__Params(this);
  }
}

export class PlatformFeeRateUpdated__Params {
  _event: PlatformFeeRateUpdated;

  constructor(event: PlatformFeeRateUpdated) {
    this._event = event;
  }

  get newRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GreenTalesMarket__getTradeHistoryResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get buyer(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class GreenTalesMarket__listingsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getSeller(): Address {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }

  getIsActive(): boolean {
    return this.value3;
  }
}

export class GreenTalesMarket__tradeHistoryResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getSeller(): Address {
    return this.value0;
  }

  getBuyer(): Address {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }
}

export class GreenTalesMarket extends ethereum.SmartContract {
  static bind(address: Address): GreenTalesMarket {
    return new GreenTalesMarket("GreenTalesMarket", address);
  }

  carbonToken(): Address {
    let result = super.call("carbonToken", "carbonToken():(address)", []);

    return result[0].toAddress();
  }

  try_carbonToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("carbonToken", "carbonToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastTradePrice(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getLastTradePrice",
      "getLastTradePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getLastTradePrice(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTradePrice",
      "getLastTradePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTradeHistory(
    _tokenId: BigInt
  ): Array<GreenTalesMarket__getTradeHistoryResultValue0Struct> {
    let result = super.call(
      "getTradeHistory",
      "getTradeHistory(uint256):((address,address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toTupleArray<
      GreenTalesMarket__getTradeHistoryResultValue0Struct
    >();
  }

  try_getTradeHistory(
    _tokenId: BigInt
  ): ethereum.CallResult<
    Array<GreenTalesMarket__getTradeHistoryResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTradeHistory",
      "getTradeHistory(uint256):((address,address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        GreenTalesMarket__getTradeHistoryResultValue0Struct
      >()
    );
  }

  greenTrace(): Address {
    let result = super.call("greenTrace", "greenTrace():(address)", []);

    return result[0].toAddress();
  }

  try_greenTrace(): ethereum.CallResult<Address> {
    let result = super.tryCall("greenTrace", "greenTrace():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastTradePrice(param0: BigInt): BigInt {
    let result = super.call(
      "lastTradePrice",
      "lastTradePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastTradePrice(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTradePrice",
      "lastTradePrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listings(param0: BigInt): GreenTalesMarket__listingsResult {
    let result = super.call(
      "listings",
      "listings(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GreenTalesMarket__listingsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_listings(
    param0: BigInt
  ): ethereum.CallResult<GreenTalesMarket__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesMarket__listingsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeeRate(): BigInt {
    let result = super.call(
      "platformFeeRate",
      "platformFeeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeeRate",
      "platformFeeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeHistory(
    param0: BigInt,
    param1: BigInt
  ): GreenTalesMarket__tradeHistoryResult {
    let result = super.call(
      "tradeHistory",
      "tradeHistory(uint256,uint256):(address,address,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new GreenTalesMarket__tradeHistoryResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_tradeHistory(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<GreenTalesMarket__tradeHistoryResult> {
    let result = super.tryCall(
      "tradeHistory",
      "tradeHistory(uint256,uint256):(address,address,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GreenTalesMarket__tradeHistoryResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _carbonToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _platformFeeRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _feeCollector(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _greenTrace(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeCollectorCall extends ethereum.Call {
  get inputs(): UpdateFeeCollectorCall__Inputs {
    return new UpdateFeeCollectorCall__Inputs(this);
  }

  get outputs(): UpdateFeeCollectorCall__Outputs {
    return new UpdateFeeCollectorCall__Outputs(this);
  }
}

export class UpdateFeeCollectorCall__Inputs {
  _call: UpdateFeeCollectorCall;

  constructor(call: UpdateFeeCollectorCall) {
    this._call = call;
  }

  get _newCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeCollectorCall__Outputs {
  _call: UpdateFeeCollectorCall;

  constructor(call: UpdateFeeCollectorCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeRateCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeRateCall__Inputs {
    return new UpdatePlatformFeeRateCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeRateCall__Outputs {
    return new UpdatePlatformFeeRateCall__Outputs(this);
  }
}

export class UpdatePlatformFeeRateCall__Inputs {
  _call: UpdatePlatformFeeRateCall;

  constructor(call: UpdatePlatformFeeRateCall) {
    this._call = call;
  }

  get _newRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformFeeRateCall__Outputs {
  _call: UpdatePlatformFeeRateCall;

  constructor(call: UpdatePlatformFeeRateCall) {
    this._call = call;
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }
}
